class Solution {
public:
    int maxInColumn(vector<vector<int>>& mat, int n, int m, int col) {
        int maxValue = -1;
        int rowIndex = -1;
        for( int i = 0; i< n; i++) {
            if(mat[i][col] > maxValue) {
                maxValue = mat[i][col];
                rowIndex = i;
            }
        }
        return rowIndex;
    }

    vector<int> findPeakGrid(vector<vector<int>>& mat) {
        int n = mat.size();
        int m = mat[0].size();
        int low = 0;
        int high = m - 1;
        
        while( low <= high) {
            int mid = (low + high) / 2;
            int RowIndexWithMax = maxInColumn(mat, n, m, mid);
            int left = 0, right = 0;
            if( mid - 1 >= 0) left = mat[RowIndexWithMax][mid - 1];
            else left = -1;
            if( mid + 1 < m) right = mat[RowIndexWithMax][mid + 1];
            else right = -1;
            
            if(mat[RowIndexWithMax][mid] > left && mat[RowIndexWithMax][mid] > right) return {RowIndexWithMax, mid};
            else if(mat[RowIndexWithMax][mid] < left) high = mid - 1;
            else low = mid + 1;
             
        }
        return {0};
    }
};
